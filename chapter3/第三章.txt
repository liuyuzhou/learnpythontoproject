3.1.1  索引
>>> group_2='56789'#定义变量group_2，并赋值56789
>>> group_2 [0] #根据编号取元素，使用格式为：在方括号中输入所取元素的编号值
'5'
>>> group_2 [1]
'6'
>>> group_2 [2]
'7'

>>> group_2[-1]
'9'
>>> group_2[-2]
'8'
>>> group_2[-3]
'7'
>>> group_2[-4]
'6'

>>> '56789'[0]
'5'
>>> '56789'[1]
'6'
>>> '56789'[-1]
'9'
>>> '56789'[-2]
'8'

>>> try_fun=input()[0]
test
>>> try_fun
't'


3.1.2  分片
>>> student='0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23, 24,25, 26,27,28,29,30' 
>>> student[10:19]  	#取得第二组所有同学的序号，加上逗号分隔符，需要取得10个字符
'5,6,7,8,9'
>>> student[-17:-1] 	#负数表明从右开始计数，取得最后一组所有6名同学的序号
'25,26,27,28,29,3'

>>> student='0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23, 24,25,26,27,28,29,30'
>>> student[66:83]  #取得最后一组所有6名同学的序号
'25,26,27,28,29,30'

>>> student[-17:0]
''

>>> number[-3: 0] 
 []

>>> student[-17:]  #取得最后一组所有6名同学的序号
 '25,26,27,28,29,30'

>>> student[66:]  #取得最后一组所有6名同学的序号
'25,26,27,28,29,30'

>>> student[:]  #取得整个数组
'0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23, 24,25,26,27,28,29,30'

>>> number[0: 10: 1]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

>>> student
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
>>> student[0]
0
>>> student[1:4]
[1,2, 3]
>>> student[-3:-1]
[28, 29]
>>> student[-3:]
[28, 29, 30] 
>>> student[:]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

>>> student[0:10:1]
[0,1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> student[0:10:2]
[0, 2, 4, 6, 8]

>>> student[1:10:2]
[1, 3, 5, 7, 9]

>>> student[:10:3]
[0, 3, 6, 9]
>>> student[2:6:3]
[2,5 ]
>>> student[2:5:3]
[2]
>>> student[1:5:3]
[1, 4]

>>> student[::3]
[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]

>>> student[::0]
Traceback (most recent call last):
  File "<pyshell#79>", line 1, in <module>
    student[::0]
ValueError: slice step cannot be zero

>>> student[10:0:-2]
[10, 8, 6, 4, 2]
>>> student[0:10:-2]
[]
>>> student[::-2]
[30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0]
>>> student[5::-2]
[5, 3, 1]
>>> student[:5:-2]
[30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6]
>>> student[::-1]
[30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
>>> student[10:0:-1]  	#第二个索引为0，取不到序列中的第一个元素
[10, 9, 8, 7, 6, 5, 4, 3, 2,1]
>>> student[10::-1] 		#设置第二个索引为空，可以取到序列的第一个元素
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1,0]
>>> student[2::-1] 		#设置第二个索引为空，可以取到序列的第一个元素
[2, 1, 0]
>>> student[2:0:-1]		 #第二个索引为0，取不到序列中的第一个元素 
[2,1]


3.1.3  序列相加
>>> [1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
>>> a = [1, 2]
>>> b = [5, 6]
>>> a + b
[1, 2, 5, 6]
>>> s = 'hello,'
>>> w = 'world'
>>> s + w
'hello,world'

>>> [1, 2] + 'hello'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "str") to list
>>> type([1, 2])		#取得[1,2]的类型为list 
<class 'list'>
>>> type('hello')		#取得hello的类型为字符串
<class 'str'>


3.1.4  乘法
>>> 'hello' * 5
'hellohellohellohellohello'
>>> [7] * 10
[7, 7, 7, 7, 7, 7, 7, 7, 7, 7]

>>> sq=[None] * 5  #初始化sq为含有5个None的序列
>>> sq
[None, None, None, None, None]


3.1.5  成员资格
>>> greeting = 'hello,world' 
>>> 'w' in greeting   #检测w是否在字符串中
True
>>> 'a' in greeting
False
>>> users = ['xiaomeng', 'xiaozhi', 'xiaoxiao']
>>> 'xiaomeng' in users  #检测字符串是否在字符串列表中
True
>>> 'xiaohuai' in users
False
>>> numbers = [1, 2, 3, 4, 5]
>>> 1 in numbers  #检测数字是否在数字列表中
True
>>> 6 in numbers
False
>>> eng = '** Study python is so happy!**'
>>> '**' in eng  #检测一些特殊字符是否在字符串中
True
>>> '$' in eng
False
>>> 'a' in numbers
False
>>> 3 in greeting
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'in <string>' requires string as left operand, not int


3.1.6  长度、最小值和最大值
>>> numbers=[300,200,100,800,500]
>>> len(numbers)
5 
>>> numbers[5]
Traceback (most recent call last):
  File "<pyshell#154>", line 1, in <module>
    numbers[5]
IndexError: list index out of range
>>> numbers[4]
500
>>> max(numbers)
800
>>> min(numbers)
100
>>> max(5,3,10,7)
10
>>> min(7,0,3,-1)
-1


3.2.1  更新列表
>>> group=[0,1,2,3,4]
>>> group[1]=9  	#索引下标为1的元素重新赋值为9
>>> group
[0, 9, 2, 3, 4]
>>> group[3]=30 	#同理，可以将索引下标为3的元素重新赋值为30
>>> group
[0, 9, 2, 30, 4]

>>> group[2]='xiaomeng' 	#对编号为2的元素赋值，赋一个字符串
>>> group
[0, 9, 'xiaomeng', 30, 4]
>>> type(group)
<class 'list'>
>>> type(group[1])  		#别忘了查看类型函数的使用
<class 'int'>
>>> type(group[2])
<class 'str'>

>>> group
[0, 9, 'xiaomeng', 30, 4]
>>> group[5]='try'
Traceback (most recent call last):
  File "<pyshell#134>", line 1, in <module>
    group[5]='try'
IndexError: list assignment index out of range

>>> group
[0, 9, 'xiaomeng', 30, 4]
>>> group.append('try')
>>> group
[0, 9, 'xiaomeng', 30, 4, 'try']

>>> group
[0, 9, 'xiaomeng', 30, 4, 'try']
>>> group.append('test') 		#向列表添加字符串
>>> group
[0, 9, 'xiaomeng', 30, 4, 'try', 'test']
>>> group.append(3) 			#向列表添加数字
>>> group
[0, 9, 'xiaomeng', 30, 4, 'try', 'test',3]

>>> group
[0, 9, 'xiaomeng', 30, 4, 'try', 'test']
>>> len(group)    	#使用序列中获取长度的函数
7
>>> del group[6] 	#删除最后一个元素，注意索引下标与序列长度的关系
>>> print('删除最后一个元素后的结果：',group)
删除最后一个元素后的结果： [0, 9, 'xiaomeng', 30, 4, 'try']
>>> len(group)
6 
>>> group
[0, 9, 'xiaomeng', 30, 4, 'try'] 
>>> del group[2]  	#删除索引下标为2的元素
>>> print('删除索引下标为2的元素后的结果：',group)
删除索引下标为2的元素后的结果： [0, 9, 30, 4, 'try'] 
>>> len(group)
5

>>> group
[0, 9, 30, 4, 'try']
>>> len(group)
5
>>> del group[3]
>>> print('删除索引下标为3的元素后的结果：',group)
删除索引下标为3的元素后的结果： [0, 9, 30, 'try']
>>> len(group)
4

>>> list('北京将举办2020年的冬奥会')
['北', '京', '将', '举', '办', '2', '0', '2', '0', '年', '的', '冬', '奥', '会']
>>> greeting=list('welcome to beijing')
>>> greeting
['w', 'e', 'l', 'c', 'o', 'm', 'e', ' ', 't', 'o', ' ', 'b', 'e', 'i', 'j', 'i', 'n', 'g'] 
>>> greeting[11:18]
['b', 'e', 'i', 'j', 'i', 'n', 'g'] 
>>> greeting[11:18]=list('china')
>>> greeting
['w', 'e', 'l', 'c', 'o', 'm', 'e', ' ', 't', 'o', ' ', 'c', 'h', 'i', 'n', 'a']

>>> greeting = list('hi')
>>> greeting
['h', 'i']
>>> greeting[1:] = list('ello')
>>> greeting
['h', 'e', 'l', 'l', 'o']

>>> field = list('ae')
>>> field
['a', 'e']
>>> field[1: 1] = list('bcd')
>>> field
['a', 'b', 'c', 'd', 'e']
>>> goodnews = list('北京将举办冬奥会')
>>> goodnews
['北', '京', '将', '举', '办', '冬', '奥', '会']
>>> goodnews[5: 5] = list('2022年的')
>>> goodnews
['北', '京', '将', '举', '办', '2', '0', '2', '2', '年', '的', '冬', '奥', '会']

>>> field = list('abcde')
>>> field
['a', 'b', 'c', 'd', 'e']
>>> field[1: 4] = []
>>> field
['a', 'e'] 
>>> field = list('abcde')
>>> del field[1: 4]
>>> field
['a', 'e']
>>> goodnews = list('北京将举办2022年的冬奥会')
>>> goodnews
['北', '京', '将', '举', '办', '2', '0', '2', '2', '年', '的', '冬', '奥', '会']
>>> goodnews[5: 11] = []
>>> goodnews
['北', '京', '将', '举', '办', '冬', '奥', '会']


3.2.2  嵌套列表
>>> bus=[[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19],[20,21, 22,23,24],[25,26,27,28,29,30]]
>>> bus
[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30]] 
>>> group1=bus[0]
>>> group1  #取得第一组所有同学的序号
[0, 1, 2, 3, 4] 
>>> type(group1)
<class 'list'>
>>> group2=bus[1]  #取得第二组所有同学的序号
>>> group2
[5, 6, 7, 8, 9] 
>>> type(group2)
<class 'list'>
>>> group6=bus[5]  #取得第三组所有同学的序号
>>> group6
[25, 26, 27, 28, 29, 30] 
>>> type(group6)
<class 'list'>
>>> number0=group1[0]  #取得0号同学的序号
>>> number0
0
>>> number30=group6[5]  #取得30号同学的序号
>>> number30
30


3.2.3  列表方法
>>> a=['hello','world']
>>> b=['python','is','funny']
>>> a.extend(b)
>>> a
['hello', 'world', 'python', 'is', 'funny']

>>> a=['hello','world']
>>> b=['python','is','funny']
>>> a+b
['hello', 'world', 'python', 'is', 'funny']
>>> a
['hello', 'world'] 
>>> a.extend(b)
>>> a
['hello', 'world', 'python', 'is', 'funny']

>>> a=['hello','world']
>>> b=['python','is','funny']
>>> a[len(a):]=b
>>> a
['hello', 'world', 'python', 'is', 'funny']

>>> field=['hello', 'world', 'python', 'is', 'funny']
>>> print('hello的索引位置为：',field.index('hello'))
hello的索引位置为： 0
>>> print('python的索引位置为：',field.index('python'))
python的索引位置为： 2
>>> print('abc的索引位置为：',field.index('abc'))
Traceback (most recent call last):
  File "<pyshell#221>", line 1, in <module>
    print('abc的索引位置为：',field.index('abc'))
ValueError: 'abc' is not in list

>>> num=[1,2,3]
>>> print('插入之前的num：',num)
插入之前的num： [1, 2, 3]
>>> num.insert(2,'插入位置在2之后，3之前')
>>> print('插入之后的num：',num)
插入之后的num： [1, 2, '插入位置在2之后，3之前', 3]

>>> num=[1,2,3]
>>> print('插入之前的num：',num)
插入之前的num： [1, 2, 3]
>>> num[2:2]=['插入位置在2之后，3之前'] 
>>> print('插入之后的num：',num) 
插入之后的num： [1, 2, '插入位置在2之后，3之前', 3]

>>> num=[5,8,1,3,6]
>>> num.sort()
>>> print('num调用sort方法后：',num)
num调用sort方法后： [1, 3, 5, 6, 8]

>>> num=[5,8,1,3,6]
>>> n=num.sort()
>>> print('变量n的结果是:',n)
变量n的结果是: None
>>> print('列表num排序后的结果是:',num)
列表num排序后的结果是: [1, 3, 5, 6, 8]

>>> num=[5,8,1,3,6]
>>> n=num    						#将列表num赋值给n
>>> n.sort()
>>> print('变量n的结果是:',n)
变量n的结果是: [1, 3, 5, 6, 8]
>>> print('num的结果是:',num) 		#num也被排序了
num的结果是: [1, 3, 5, 6, 8]
>>> num=[5,8,1,3,6]
>>> n=num[:]   						#将列表num切片后赋值给n
>>> n.sort()
>>> print('变量n的结果是:',n)
变量n的结果是: [1, 3, 5, 6, 8]
>>> print('num的结果是:',num)  		#num保持原样
num的结果是: [5, 8, 1, 3, 6]

>>> num=[5,8,1,3,6]
>>> n=sorted(num)
>>> print('变量n的操作结果是:',n)
变量n的操作结果是: [1, 3, 5, 6, 8]
>>> print('num的结果是:',num)  	#num保持原样
num的结果是: [5, 8, 1, 3, 6]

>>> sorted('python')
['h', 'n', 'o', 'p', 't', 'y']
>>> sorted('321')
['1', '2', '3']

>>> field=['study','python','is','happy']
>>> copyfield=field.copy()
>>> print('复制操作结果:',copyfield)
复制操作结果: ['study', 'python', 'is', 'happy']

>>> num=[5,8,1,3,6] 
>>> num
[5, 8, 1, 3, 6] 
>>> n=num.copy()
>>> n
[5, 8, 1, 3, 6]
>>> n.sort()
>>> n
[1, 3, 5, 6, 8]
>>> num
[5, 8, 1, 3, 6]

>>> num = [1, 2, 3]
>>> num.append(num.pop()) 		#追加默认出栈的值
>>> print('num追加默认出栈值的操作结果：',num)
num追加默认出栈值的操作结果： [1, 2, 3]

>>> good=['女排','精神','中国','精神','学习','精神']
>>> >>> print('移除前列表good：',good)
移除前列表good： ['女排', '精神', '中国', '精神', '学习', '精神']
>>> good.remove('精神')
>>> print('移除后列表good：',good)
移除后列表good： ['女排', '中国', '精神', '学习', '精神'] 
>>> good.remove('happy')  #删除列表中不存在的元素
Traceback (most recent call last):
  File "<pyshell#238>", line 1, in <module>
    good.remove('happy')
ValueError: list.remove(x): x not in list

>>> field=['hello', 'world', 'python', 'is', 'funny']
>>> field.pop()  #不传参数，默认移除最后一个元素
'funny'
>>> print('移除元素后的field：',field)
移除元素后的field： ['hello', 'world', 'python', 'is']
>>> field.pop(3)  #移除编号为3的元素
'is'
>>> print('移除元素后的field：',field)
移除元素后的field： ['hello', 'world', 'python']
>>> field.pop(0)
'hello'
>>> print('移除元素后的field：',field)
移除元素后的field： ['world', 'python']

>>> num=[1,2,3]
>>> num.append(num.pop()) 		#追加默认出栈的值
>>> print('num追加默认出栈值的操作结果：',num)
num追加默认出栈值的操作结果： [1, 2, 3]

>>> num=[1,2,3]
>>> print('列表反转前num：',num)
列表反转前num： [1, 2, 3]
>>> num.reverse()
>>> print('列表反转后：',num)
列表反转后： [3, 2, 1]

>>> num = [1, 2, 3]
>>> print('使用reversed函数翻转结果：', list(reversed(num)))
使用reversed函数翻转结果： [3, 2, 1]

>>> field=['study','python','is','happy']
>>> field.clear()
>>> print('field调用clear方法后的结果:',field)
field调用clear方法后的结果: []

>>> field=list('hello,world')
>>> field
['h', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'r', 'l', 'd']
>>> print('列表field中，字母o的个数：',field.count('o'))	  #统计列表中的字符个数
列表field中，字母o的个数： 2
>>> print('列表field中，字母l的个数：',field.count('l'))
列表field中，字母l的个数： 3
>>> print('列表field中，字母a的个数：',field.count('a'))
列表field中，字母a的个数： 0
>>> listobj=[123, 'hello', 'world', 123]
>>> listobj=[26, 'hello', 'world', 26]
>>> print('数字26 的个数：',listobj.count(26))
数字26 的个数： 2
>>> print('hello的个数：',listobj.count('hello'))#统计字符串个数
hello的个数： 1
>>> ['a','c','a','f','a'].count('a')
3
>>> mix=[[1,3],5,6,[1,3],2,]
>>> print('嵌套列表mix中列表[1,3]的个数为：',mix.count([1,3]))
嵌套列表mix中列表[1,3]的个数为： 2

>>> field = ['study', 'python', 'is', 'happy']
>>> field.sort(key=len) 				#按字符串由短到长排序
>>> field
>>> field.sort(key=len, reverse=True)		#按字符串由长到短排序，传递两个参数
>>> field
['python', 'study', 'happy', 'is']
['is', 'study', 'happy', 'python']
>>> num = [5, 8, 1, 3, 6]
>>> num.sort(reverse=True) 			#排序后逆序
>>> num
[8, 6, 5, 3, 1]


3.3  元    组
>>> 1, 2, 3
(1, 2, 3) 
>>> 'hello', 'world'
('hello', 'world')

>>> 5,6,7
(5, 6, 7)
>>> (5,6,7)
(5, 6, 7)
>>> 'hi','python'
('hi', 'python')
>>> ('hi','python')
('hi', 'python')

>>> ()
()

>>> (1)
1

>>> 1,
(1,)
>>> (1,)
(1,)


3.3.1  tuple函数
>>> tuple(['hello', 'world'])
('hello', 'world')
>>> tuple('hello')
('h', 'e', 'l', 'l', 'o')
>>> tuple(('hello', 'world'))  #参数是元组
('hello', 'world')

>>> tuple(['hi','python'])  	#列表转元组
('hi', 'python')
>>> list(('hi', 'python')) 	#元组转列表
['hi', 'python']


3.3.2  元组的基本操作
1. 访问元组
>>> strnum=('hi','python',2017,2018)
>>> print('strnum[1] is:',strnum[1])
strnum[1] is: python
>>> print('strnum[3] is:',strnum[3])
strnum[3] is: 2018
>>> numbers=(1,2,3,4,5,6)
>>> print('numbers[5] is:',numbers[5])
numbers[5] is: 6
>>> print('numbers[1:3] is:',numbers[1:3])
numbers[1:3] is: (2, 3)

2. 修改元组
>>> greeting=('hi','python')
>>> yearnum=(2018,)
>>> print ("合并结果为: ", greeting+yearnum)
合并结果为:  ('hi', 'python', 2018)

3. 删除元组
>>> greeting=('hi','python')
>>> greeting
('hi', 'python')
>>> print('删除元组greeting前：',greeting)
删除元组greeting前： ('hi', 'python')
>>> del greeting
>>> print('删除元组greeting后：',greeting)
Traceback (most recent call last):
  File "<pyshell#281>", line 1, in <module>
    print('删除元组greeting后：',greeting)
NameError: name 'greeting' is not defined 
>>> greeting
Traceback (most recent call last):
  File "<pyshell#282>", line 1, in <module>
    greeting
NameError: name 'greeting' is not defined

4. 元组索引、截取
>>> field=('hello','world','welcome')
>>> field[2]
'welcome'
>>> field[-2]
'world'
>>> field[1:]
('world', 'welcome')


3.3.3  元组内置函数
>>> greeting=('hello','world','welcome')
>>> len(greeting)
3 
>>> greeting=('hello',)
>>> len(greeting)
1
>>> greeting=()
>>> len(greeting)
0

>>> number=(39,28,99,88,56)
>>> max(number)
99
>>> tup=('6', '3', '8')
>>> max(tup)
'8'>>> 
mix=(38,26,'77') 
>>> mix
(38, 26, '77')
>>> max(mix)
Traceback (most recent call last):
  File "<pyshell#296>", line 1, in <module>
    max(mix)
TypeError: '>' not supported between instances of 'str' and 'int'

>>> number=(39,28,99,88,56)
>>> min(number)
28
>>> tup=('6', '3', '8')
>>> min(tup)
'3'
>>> mix=(38,26,'77')
>>> mix
(38, 26, '77')
>>> min(mix)
Traceback (most recent call last):
  File "<pyshell#298>", line 1, in <module>
    min(mix)
TypeError: '<' not supported between instances of 'str' and 'int'


3.4  列表与元组的区别
>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])


3.5  牛刀小试――列表与元组相互转化
>>> # tuple---------------->list
...
>>> tup = (123,'hello',[23,'中国'],('python3.8', 'learn'))
>>> tup
(123, 'hello', [23, '中国'], ('python3.8', 'learn'))
>>> tup2ls = list(tup)
>>> tup2ls
[123, 'hello', [23, '中国'], ('python3.8', 'learn')]
>>> # list------------------->tuple
...
>>> ls2tup = tuple(tup2ls)
>>> ls2tup
(123, 'hello', [23, '中国'], ('python3.8', 'learn')) 

>>> greeting = 'hello'
>>> len(greeting)  #获取字符串长度
5
>>> greeting[10]   #编号超过最大长度编号
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
>>> greeting[5] #字符串长度为5，但最大编号不是5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
>>> greeting[len(greeting)-1] #最大编号是字符串长度减1
'o'
>>> greeting[-10]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
>>> greeting[-1]
'o'
>>> greeting[-5]
'h'

>>> number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  
>>> number[7: 15]
[8, 9, 10]
>>> number[-100: -1]
[1, 2, 3, 4, 5, 6, 7, 8, 9] #最后一个元素没有取到

>>> max(a, b, c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> max('a','b','c')
'c' 
