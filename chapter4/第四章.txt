4.1  字符串的简单操作
>>> ''   		#创建单引号引起的空字符串
''
>>> ""  			#创建双引号引起的空字符串
''
>>> 'hello'   	#创建单引号引起的非空字符串
'hello'
>>> "python"   	#创建双引号引起的非空字符串
'python'
>>> empy=''   	#创建空字符串，将字符串赋给变量empy
>>> say='hello,world'  #创建非空字符串，并将字符串赋给变量say


>>> say='just do it'
>>> say
'just do it'
>>> say[-2:]
' it'
>>> say[-2:]='now'
Traceback(most recent call last):
  File "<pyshell#12>", line 1, in <module>
say[-2:]='now'
TypeError: 'str' object does not support item assignment


>>> print('读万卷书，\n行万里路。')
读万卷书，
行万里路。


>>> print(''读万卷书'\n'行万里路'') 	#不使用转义字符，全用单引号
  SyntaxError: invalid syntax
>>> print(""读万卷书"\n"行万里路"") 	#不使用转义字符，全用单引号
SyntaxError: invalid syntax
>>> print("'读万卷书'\n'行万里路'")	#不使用转义字符，字符串用双引号引起，里面都用单引号
'读万卷书'
'行万里路'
>>> print('"读万卷书"\n"行万里路"')	#不使用转义字符，字符串用单引号引起，里面都用双引号
"读万卷书"
"行万里路"
>>> print('\'读万卷书\'\n\'行万里路\'')	  #使用\’转义字符
'读万卷书'
'行万里路'


4.2.1  经典的字符串格式化符号――百分号（%）
>>> print('hi,%s' % 'python')
hi,python
>>> print('一年有%s个月' % 12)
一年有12个月

>>> print('一年有%s个月' % 12)  		#使用%s作为12的占位符
一年有12个月
>>> print('一年有%d个月' % 12)  		#使用%d作为12的占位符
一年有12个月

>>> print('圆周率PI的值为：%f' % 3.14)
圆周率PI的值为：3.140000 

>>> print('圆周率PI的值为：%.2f' % 3.14)
圆周率PI的值为：3.14

>>> print('今天的空气质量比昨天提升了：%.2f' % 1.23+'%')
今天的空气质量比昨天提升了：1.23%

>>> print('今天的空气质量比昨天提升了：%.2f%%' % 1.23)
今天的空气质量比昨天提升了：1.23%

>>> print('输出百分号:%s' % '%')
输出百分号:%



4.2.2  元组的字符串格式化
>>> print('%s年的冬奥会将在%s举行，预测中国至少赢取%d枚金牌' % ('2022','北京',5))
2022年的冬奥会将在北京举行，预测中国至少赢取5枚金牌
>>> print('%s年的冬奥会将在%s举行，预测中国至少赢取%d枚金牌' % ('2022','北京')) #少一个值
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    print('%s年的冬奥会将在%s举行，预测中国至少赢取%d枚金牌' % ('2022','北京'))
TypeError: not enough arguments for format string
>>> print('%s年的冬奥会将在%s举行，预测中国至少赢取枚金牌' % ('2022','北京',5)) #少一个占位符
Traceback(most recent call last):
  File "<pyshell#5>", line 1, in <module>
    print('%s年的冬奥会将在%s举行，预测中国至少赢取枚金牌' % ('2022','北京',5))
TypeError: not enough arguments for format string
>>> print('%s年的冬奥会将在%s举行，预测中国至少赢取%d枚金牌' % ['2022','北京',5])
Traceback(most recent call last):
  File "<pyshell#7>", line 1, in <module>
    print('%s年的冬奥会将在%s举行，预测中国至少赢取%d枚金牌' % ['2022','北京',5])
TypeError: not enough arguments for format string
>>> print('%s年的冬奥会将在北京举行' % ['2022'])
['2022']年的冬奥会将在北京举行
>>> print('%s年的冬奥会将在北京举行' % '2022')
2022年的冬奥会将在北京举行
>>> print('%s年的冬奥会将在北京举行' % ['2022','北京'])
['2022', '北京']年的冬奥会将在北京举行

1. 简单转换
>>> print('圆周率PI的值为：%.2f' % 3.14)
圆周率PI的值为：3.14
>>> print('石油价格为每桶：$%d' % 96)
石油价格为每桶：$96


2. 字段宽度和精度
>>> print('圆周率PI的值为：%10f' % 3.141593)   #字段宽度为10
圆周率PI的值为：3.141593 	#字符串宽度为10，被字符串占据8个空格，剩余两个空格
>>> print('保留2位小数，圆周率PI的值为：%10.2f' % 3.141593)   #字段宽度为10
保留2位小数，圆周率PI的值为：3.14 	#字符串宽度为10，字符串占据4个，剩6个
>>> print('保留2位小数，圆周率PI的值为：%.2f' % 3.141593)   #输出，没有字段宽度参数
保留2位小数，圆周率PI的值为：3.14  			
>>> print('字符串精度获取：%.5s' % ('hello world'))	#打印字符串前5个字符
字符串精度获取：hello

>>> print('从元组中获取字符串精度：%*.*s' % (10,5,'hello world'))
从元组中获取字符串精度：     hello  		#输出字符串宽度为10、精度为5
>>> print('从元组中获取字符串精度：%.*s' % (5,'hello world'))
从元组中获取字符串精度：hello  #输出精度为5

3. 符号、对齐和0填充
>>> print('圆周率PI的值为：%010.2f' % 3.141593)
圆周率PI的值为：0000003.14

>>> print('圆周率PI的值为：%10.2f' % 3.14)
圆周率PI的值为：      3.14
>>> print('圆周率PI的值为：%-10.2f' % 3.14)
圆周率PI的值为：3.14      #此处右侧为多出的空格

>>> print(('% 5d' % 10) + '\n' + ('% 5d' % -10))
   10
  -10

>>> print(('宽度前加加号：%+5d' % 10) + '\n' + ('宽度前加加号：%+5d' % -10))
宽度前加加号：  +10
宽度前加加号：  -10


4.2.3  format字符串格式化
>>> 'hello,{}'.format('world')
'hello,world'
>>> print('圆周率PI的值为：{0}'.format(3.141593))
圆周率PI的值为：3.141593
>>> print('圆周率PI的值为：{0:.2f}'.format(3.141593))
圆周率PI的值为：3.14
>>> print('圆周率PI的值为：{pi}'.format(pi=3.141593))
圆周率PI的值为：3.141593
>>> print('{}年的冬奥会将在{}举行，预测中国至少赢取{}枚金牌'.format('2022','北京',5))
2022年的冬奥会将在北京举行，预测中国至少赢取5枚金牌
>>> print('{0}年的冬奥会将在{1}举行，预测中国至少赢取{2}枚金牌'.format('2022','北京',5))
2022年的冬奥会将在北京举行，预测中国至少赢取5枚金牌
>>> print('{0}年的冬奥会将在{2}举行，预测中国至少赢取{1}枚金牌'.format ('2022',5,'北京'))
2022年的冬奥会将在北京举行，预测中国至少赢取5枚金牌
>>> print('{year}年的冬奥会将在{address}举行'.format(year='2022',address='北京'))
2022年的冬奥会将在北京举行

>>> print('{0}年的冬奥会将在{2}举行'.format('2022',5,'beijing','sh'))
2022年的冬奥会将在beijing举行

>>> print('{year}年的冬奥会将在{address}举行'.format(year='2022',address='北京', num=5))
2022年的冬奥会将在北京举行



4.2.4  字符串格式化的新方法
>>> f'hello,{world}'
'hello,world'
>>> f'{2*10}'
'20'
>>> year = 2022
>>> address = '北京'
>>> gold = 5
>>> f'{year}年的冬奥会将在{address}举行，预测中国至少赢取{gold}枚金牌'
'2022年的冬奥会将在北京举行，预测中国至少赢取5枚金牌'
>>> print(f'{year}年的冬奥会将在{address}举行，预测中国至少赢取{gold}枚金牌')
2022年的冬奥会将在北京举行，预测中国至少赢取5枚金牌


4.2.5  f-string字符串格式化
>>> name='xiaomeng'
>>> number=1001
>>> print(f'name={name}, number={number}')
name=xiaomeng, number=1001

>>> name='xiaomeng'
>>> number=1001
>>> print(f'{name=}, {number=}')
name='xiaomeng', number=1001

>>> x=5
>>> print(f'{x+1}')
6

>>> x=5
>>> print(f'{x+1=}')
x+1=6

>>> import math
>>> print(f'{math.pi=}')
math.pi=3.141592653589793
>>> print(f'{math.pi=:.3}') # 输出3位数，小数位两位
math.pi=3.14


4.3.1  split()方法
>>> say='stay hungry stay foolish'
>>> print('不提供任何分割符分割后的字符串：',say.split())
不提供任何分割符分割后的字符串： ['stay', 'hungry', 'stay', 'foolish']
>>> print('根据字母t分割后的字符串：',say.split('t'))
根据字母t分割后的字符串： ['s', 'ay hungry s', 'ay foolish']
>>> print('根据字母s分割后的字符串：',say.split('s'))
根据字母s分割后的字符串： ['', 'tay hungry ', 'tay fooli', 'h']
>>> print('根据字母s分割2次后的字符串：',say.split('s',2))
根据字母s分割2次后的字符串： ['', 'tay hungry ', 'tay foolish']


4.3.2  strip()方法
>>>say=' stay hungry stay foolish '  #字符串前后都带有空格
>>> print(f'原字符串：{say},字符串长度为:{len(say)}')
原字符串： stay hungry stay foolish ,字符串长度为:26 
>>> print(f'新字符串：{say.strip()},新字符串长度为：{len(say.strip())}')
新字符串：stay hungry stay foolish,新字符串长度为：24
>>> say='--stay hungry stay foolish--'
>>> print(f'原字符串：{say},字符串长度为:{len(say)}')
原字符串：--stay hungry stay foolish--,字符串长度为:28
>>> print(f'新字符串：{say.strip("-")},新字符串长度为：{len(say.strip("-"))}')
新字符串：stay hungry stay foolish,新字符串长度为：24
>>> say='--stay-hungry-stay-foolish--'
>>> print(f'原字符串：{say},字符串长度为:{len(say)}')
原字符串：--stay-hungry-stay-foolish--,字符串长度为:28
>>> print(f'新字符串：{say.strip("-")},新字符串长度为：{len(say.strip("-"))}')
新字符串：stay-hungry-stay-foolish,新字符串长度为：24


4.3.3  join()方法
>>> say=('stay hungry','stay foolish')
>>> new_say=','.join(say)
>>> print(f'连接后的字符串列表：{new_say}')
连接后的字符串列表：stay hungry,stay foolish
>>> path_str='d:','python','study'
>>> path='/'.join(path_str) 
>>> print(f'python file path:{path}')
python file path:d:/python/study 
>>> num=['1','2','3','4','a','b']
>>> plus_num='+'.join(num)
>>> plus_num
'1+2+3+4+a+b'
>>> num=[1,2,3,4]
>>> mark='+'
>>> mark.join(num)
Traceback (most recent call last):
  File "<pyshell#39>", line 1, in <module>
    mark.join(num)
TypeError: sequence item 0: expected str instance, int found
>>> num.join(mark)
Traceback (most recent call last):
  File "<pyshell#40>", line 1, in <module>
    num.join(mark)
AttributeError: 'list' object has no attribute 'join'


4.3.4  find()方法
>>> say='stay hungry,stay foolish' 
>>> print(f'say字符串的长度是:{len(say)}')
say字符串的长度是:24 
>>> say.find('stay')
0
>>> say.find('hun')
5
>>> say.find('sh')
22
>>> say.find('python')
-1

>>> say='stay hungry,stay foolish'
>>> say.find('stay',3)  		#提供起点
12
>>> say.find('y',3)  			#提供起点
3 
>>> say.find('hun',3) 		#提供起点
5
>>> say.find('stay',3,10)  	#提供起点和终点
-1
>>> say.find('stay',3,15)  	#提供起点和终点
-1
>>> say.find('stay',3,18)  	#提供起点和终点
12


4.3.5  lower()方法
>>> field='DO IT NOW'
>>> print('调用lower得到字符串：',field.lower())
调用lower得到字符串： do it now
>>> greeting='Hello,World'
>>> print('调用lower得到字符串：',greeting.lower())

>>> field='DO IT NOW'
>>> field.find('It')  #field字符串不转换为小写字母，找不到匹配字符串
-1
>>> field.lower().find('It')  #field字符串先转换为小写字母，但It不转为小写字母，找不到匹配字符串
-1
>>> field.lower().find('It'.lower())  #都使用lower()方法转换成小写字母后查找
3


4.3.6  upper()方法
>>> field='do it now'
>>> print('调用upper得到字符串：',field.upper())
调用upper得到字符串： DO IT NOW
>>> greeting='Hello,World'
>>> print('调用upper得到字符串：',greeting.upper())

>>> field='do it now'
>>> field.find('It') #都不转换为大写，找不到匹配字符串
-1
>>> field.upper().find('It') #被查找的字符串不转换为大写，找不到匹配字符串
-1
>>> field.upper().find('It'.upper())  #使用upper()方法转换为大写后查找
3


4.3.7  replace()方法
>>> field='do it now,do right now'
>>> print('原字符串：',field)
原字符串： do it now,do right now
>>> print('新字符串：',field.replace('do','Just do'))
新字符串： Just do it now,Just do right now
>>> print('新字符串：',field.replace('o','Just',1))
新字符串： dJust it now,do right now
>>> print('新字符串：',field.replace('o','Just',2))
新字符串： dJust it nJustw,do right now
>>> print('新字符串：',field.replace('o','Just',3))
新字符串： dJust it nJustw,dJust right now



4.3.8  swapcase()方法	
>>> field='Just do it,NOW'
>>> print('原字符串：',field)
原字符串： Just do it,NOW
>>> print('调用swapcase方法后得到的字符串：',field.swapcase())
调用swapcase方法后得到的字符串： jUST DO IT,now



4.3.9  translate()方法
>>> intab='adefs'
>>> outtab='12345'
>>> trantab=str.maketrans(intab,outtab)
>>> st='just do it'
>>> print('st调用translate方法后：',st.translate(trantab))
st调用translate方法后： ju5t 2o it


4.4  牛刀小试――变形金刚
>>> def str_transformers():
...     old_str = 'hello'
...     print('the length of old_str is:', len(old_str))
...     print('upper old_str is:', old_str.upper())
...     print('title old_str is:', old_str.title())
...     new_str = old_str.replace('e', 'E')
...     print('new_str is:', new_str)
...     print('swap case new_str is:', new_str.swapcase())
...     print('use \',\' join old_str is:',','.join(old_str.split('e')))
...
>>> str_transformers()
打印结果如下：
>>> str_transformers()
the length of old_str is: 5
upper old_str is: HELLO
title old_str is: Hello
new_str is: hEllo
swap case new_str is: HeLLO
use ',' join old_str is: h,llo


4.5  调    试
>>> print ('hello,%d' % 'world')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: %d format: a number is required, not str 

>>> print ('圆周率PI的值为：%d' % 3.14)
圆周率PI的值为：3

>>> print ('圆周率PI的值为：%06.2f' % 3.141593)
圆周率PI的值为：003.14
>>> print ('圆周率PI的值为：%16.2f' % 3.141593)
圆周率PI的值为：            3.14
>>> print ('圆周率PI的值为：%.02f' % 3.141593)
圆周率PI的值为：3.14
>>> print ('圆周率PI的值为：%.12f' % 3.141593)
圆周率PI的值为：3.141593000000
>>> print ('圆周率PI的值为：%.-12f' % 3.141593)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: unsupported format character '-' (0x2d) at index 11
